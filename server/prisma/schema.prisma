generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  wishlist   Wishlist?
  cart       Cart?
  orders     Order[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatbotLogs ChatbotLog[]  // ✅ Add this to establish the reverse relation
   payments    Payment[]  // ✅ Add this to establish the reverse relation
  addresses  Address[]
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Category {
  id          String    @id @default(uuid())
  name        String    @unique // Ensure category names are unique
  slug        String?    @unique // For SEO-friendly URLs
  imageUrl    String?   // Main category image
  bannerUrl   String?   // Optional banner image for category pages
  description String?   // Brief description of the category
  isFeatured  Boolean   @default(false) // Flag for featured categories
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  discount    Int?     @default(0) // Added discount field
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  imageUrl    String?
  images      String[] // ✅ Store multiple images
  stock       Int      @default(0)
  rating      Float?   @default(0.0) // ✅ Rating support
  reviewCount Int?     @default(0) // ✅ Review count support
  specifications Json? // ✅ Store specifications as JSON
  variants    Json?    // ✅ Store variants as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wishlists   WishlistProduct[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
}


model Wishlist {
  id       String   @id @default(uuid())
  userId   String   @unique
  user     User     @relation(fields: [userId], references: [id])
  products WishlistProduct[]
}

model WishlistProduct {
  id         String   @id @default(uuid())
  wishlistId String
  productId  String

  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
}

model Cart {
  id       String   @id @default(uuid())
  userId   String   @unique
  user     User     @relation(fields: [userId], references: [id])
  items    CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
}

model Order {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  products    OrderItem[]
  totalAmount Decimal
  status      String   @default("Pending") // Pending, Shipped, Delivered, Canceled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payments  Payment[]
  
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  price     Decimal
}

model ChatbotLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  query     String
  response  String
  createdAt DateTime @default(now())
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])  
  amount    Decimal
  status    String   @default("Pending") // Pending, Completed, Failed 
  createdAt DateTime @default(now())
}
